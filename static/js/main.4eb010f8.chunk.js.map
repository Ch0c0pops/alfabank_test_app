{"version":3,"sources":["types/types.ts","Axios/axios.ts","Redux/mainReducer.ts","Redux/store.ts","Components and styles/Components/Menu.tsx","Components and styles/Components/Item.tsx","Components and styles/Components/ItemsList.tsx","Components and styles/Components/Pagination.tsx","Components and styles/Components/Loader.tsx","Components and styles/Components/App.tsx","reportWebVitals.ts","index.tsx","Components and styles/styles/itemsList.module.scss","Components and styles/styles/pagination.module.scss","Components and styles/styles/loader.module.scss"],"names":["actions","instance","axios","create","baseURL","API","getItems","currPage","get","getFavouriteItems","ids","showFavsAC","showFavs","type","SHOW_FAVS","addToFavsAC","id","ADD_TO_FAVS","setLoadingAC","isLoading","SET_LOADING","initialState","items","favItems","currentPage","info","reducers","combineReducers","main","state","action","GET_ITEMS","data","results","GET_FAV_ITEMS","GET_FAVS","JSON","parse","localStorage","getItem","SET_CURRENT_PAGE","page","useTypedUseSelector","useSelector","store","createStore","composeWithDevTools","applyMiddleware","thunk","Menu","dispatch","useDispatch","Box","sx","flexGrow","AppBar","position","Toolbar","background","Typography","variant","component","FormControlLabel","label","control","Switch","color","checked","onChange","Item","props","ImageListItem","src","image","srcSet","alt","loading","ImageListItemBar","title","name","subtitle","gender","species","status","actionIcon","includes","fontSize","onClick","event","favs","filteredFavs","filter","f","setItem","stringify","removeFromFavsHandler","parsedFavs","push","arr","addToFavsHandler","ItemsList","useEffect","a","favouriteItems","response","alert","getItemsThunk","length","className","styles","itemsList","map","item","key","PaginationPage","clickHandler","target","num","Number","innerText","dataset","testid","pages","pagination","Stack","spacing","mx","width","Pagination","count","shape","showFirstButton","showLastButton","btn","Loader","ldsEllipsis","App","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4eb010f8.chunk.js","sourcesContent":["export interface MainReducerStateType {\r\n    items: Array<ItemType>\r\n    showFavs: boolean\r\n    favItems: Array<number>\r\n    currentPage: number\r\n    info: Info | null\r\n    isLoading: boolean\r\n}\r\n\r\ninterface Info {\r\n    count?: number,\r\n    pages: number,\r\n    next?: string | null,\r\n    prev?: string | null\r\n}\r\n\r\nexport interface ItemType {\r\n    id: number\r\n    name: string\r\n    image?: string\r\n    status?: string\r\n    species?: string\r\n    type?: string\r\n    gender?: string\r\n    fav?: boolean\r\n}\r\n\r\nexport enum actions {\r\n    GET_ITEMS = \"GET_ITEMS\",\r\n    SHOW_FAVS = \"SHOW_FAVS\",\r\n    ADD_TO_FAVS = \"ADD_TO_FAVS\",\r\n    GET_FAVS = \"GET_FAVS\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    GET_FAV_ITEMS = \"GET_FAV_ITEMS\",\r\n    SET_LOADING = \"SET_LOADING\"\r\n}\r\n\r\nexport interface AddToFavsActionType {\r\n    type: actions.ADD_TO_FAVS\r\n    id: number\r\n}\r\n\r\nexport interface SetLoadingActionType {\r\n    type: actions.SET_LOADING\r\n    isLoading: boolean\r\n}\r\n\r\nexport interface GetFavItemsType {\r\n    type: actions.GET_FAV_ITEMS\r\n    data: Array<any>\r\n}\r\n\r\nexport interface GetItemsActionType {\r\n    type: actions.GET_ITEMS\r\n    data: any\r\n}\r\n\r\nexport interface ShowFavsActionType {\r\n    type: actions.SHOW_FAVS\r\n    showFavs: boolean\r\n}\r\n\r\nexport interface GetFavsActionType {\r\n    type: actions.GET_FAVS\r\n}\r\n\r\nexport interface SetCurrentPageType {\r\n    type: actions.SET_CURRENT_PAGE,\r\n    page: number\r\n}\r\n\r\nexport type ActionTypes = GetItemsActionType | ShowFavsActionType | AddToFavsActionType | GetFavsActionType |\r\n    SetCurrentPageType | GetFavItemsType | SetLoadingActionType","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://rickandmortyapi.com/api',\r\n})\r\n\r\nlet API = {\r\n    getItems(currPage: any) {\r\n        return instance.get(`/character/?page=${currPage}`)\r\n    },\r\n    getFavouriteItems(ids: Array<number>) {\r\n        return instance.get(`/character/${ids}`)\r\n    }\r\n}\r\n\r\nexport default API\r\n\r\n","import {actions, ActionTypes, ItemType, MainReducerStateType} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport API from \"../Axios/axios\";\r\n\r\nexport const showFavsAC = (showFavs: boolean) => ({type: actions.SHOW_FAVS, showFavs})\r\nexport const getItemsAC = (data: any) => ({type: actions.GET_ITEMS, data})\r\nexport const addToFavsAC = (id: Array<number>) => ({type: actions.ADD_TO_FAVS, id})\r\nexport const getFavsAC = () => ({type: actions.GET_FAVS})\r\nexport const setCurrPageAC = (page: number) => ({type: actions.SET_CURRENT_PAGE, page})\r\nexport const getFavItemsAC = (data: Array<ItemType>) => ({type: actions.GET_FAV_ITEMS, data})\r\nexport const setLoadingAC = (isLoading: boolean) => ({type: actions.SET_LOADING, isLoading})\r\n\r\nexport const getItemsThunk = (currentPage: number) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setLoadingAC(true))\r\n        dispatch(showFavsAC(false))\r\n        let response = await API.getItems(currentPage)\r\n        if (response !== null) {\r\n            dispatch(getItemsAC(response.data))\r\n\r\n        }\r\n    } catch (e) {\r\n        alert(e)\r\n    } finally {\r\n        dispatch(setLoadingAC(false))\r\n    }\r\n}\r\n\r\nexport const getFavouriteItemsThunk = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setLoadingAC(true))\r\n        let favouriteItems = localStorage.getItem(\"favs\")\r\n        if (favouriteItems != null) {\r\n            let response = await API.getFavouriteItems(JSON.parse(favouriteItems))\r\n            dispatch(getFavItemsAC(response.data))\r\n        }\r\n    } catch (e) {\r\n        alert(e)\r\n    } finally {\r\n        dispatch(setLoadingAC(false))\r\n    }\r\n}\r\n\r\nconst initialState: MainReducerStateType = {\r\n    items: [],\r\n    favItems: [],\r\n    showFavs: false,\r\n    currentPage: 1,\r\n    info: null,\r\n    isLoading: false\r\n}\r\n\r\nexport const mainReducer = (state = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case actions.GET_ITEMS:\r\n            return {...state, items: action.data.results, info: action.data.info}\r\n        case actions.GET_FAV_ITEMS:\r\n            return {...state, items: action.data}\r\n        case actions.SHOW_FAVS:\r\n            return {...state, showFavs: action.showFavs}\r\n        case actions.ADD_TO_FAVS:\r\n            return {...state, favItems: action.id}\r\n        case actions.GET_FAVS:\r\n            // @ts-ignore\r\n            return {...state, favItems: JSON.parse(localStorage.getItem('favs'))}\r\n        case actions.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.page}\r\n        case actions.SET_LOADING:\r\n            return {...state, isLoading: action.isLoading}\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport {mainReducer} from \"./mainReducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    main: mainReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof reducers>\r\nexport const useTypedUseSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\nexport const store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)))","import * as React from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport {useTypedUseSelector} from \"../../Redux/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {showFavsAC} from \"../../Redux/mainReducer\";\r\n\r\nexport const Menu = () => {\r\n    const dispatch = useDispatch()\r\n    let showFavs = useTypedUseSelector(state => state.main.showFavs)\r\n\r\n    let showFavsHandler = () => {\r\n        dispatch(showFavsAC(!showFavs))\r\n    }\r\n    return (\r\n        <div>\r\n            <Box sx={{flexGrow: 1}}>\r\n\r\n                <AppBar position=\"static\">\r\n                    <Toolbar sx={{background: \"darkred\"}}>\r\n\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            Альфа банк | тестовое\r\n                        </Typography>\r\n                        <FormControlLabel\r\n                            label={showFavs ? \"все карточки\" : \"избранные\"}\r\n                            control={\r\n                                <Switch\r\n                                    color=\"warning\"\r\n\r\n                                    checked={showFavs}\r\n                                    onChange={showFavsHandler}\r\n                                    aria-label=\"switch\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import * as React from 'react';\r\nimport ImageListItem from '@mui/material/ImageListItem';\r\nimport ImageListItemBar from '@mui/material/ImageListItemBar';\r\nimport {ItemType} from \"../../types/types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addToFavsAC} from \"../../Redux/mainReducer\";\r\nimport {useTypedUseSelector} from \"../../Redux/store\";\r\nimport FavoriteRoundedIcon from '@mui/icons-material/FavoriteRounded';\r\n\r\nconst Item = (props: ItemType) => {\r\n    const dispatch = useDispatch()\r\n    const favItems: Array<number> = useTypedUseSelector(state => state.main.favItems)\r\n\r\n    let addToFavsHandler = (id: number) => {\r\n        let favs = localStorage.getItem('favs')\r\n        if (favs) {\r\n            let parsedFavs = JSON.parse(favs)\r\n            parsedFavs.push(id)\r\n            localStorage.setItem('favs', JSON.stringify(parsedFavs))\r\n            dispatch(addToFavsAC(parsedFavs))\r\n        } else {\r\n            let arr = [id]\r\n            localStorage.setItem('favs', JSON.stringify(arr))\r\n            dispatch(addToFavsAC(arr))\r\n        }\r\n    }\r\n    let removeFromFavsHandler = (id: number) => {\r\n        let favs = localStorage.getItem('favs')\r\n        if (favs) {\r\n            let parsedFavs = JSON.parse(favs)\r\n            let filteredFavs = parsedFavs.filter((f: number) => f !== id)\r\n            localStorage.setItem('favs', JSON.stringify(filteredFavs))\r\n            dispatch(addToFavsAC(filteredFavs))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ImageListItem key={props.image}>\r\n            <img\r\n                src={`${props.image}?w=248&fit=crop&auto=format`}\r\n                srcSet={`${props.image}?w=248&fit=crop&auto=format&dpr=2 2x`}\r\n                alt={`img${props.id}`}\r\n                loading=\"lazy\"\r\n            />\r\n\r\n            <ImageListItemBar\r\n                title={props.name}\r\n                subtitle={`${props.gender} / ${props.species} / ${props.status} `}\r\n                actionIcon={\r\n                    {\r\n                        ...favItems.includes(props.id) ?\r\n                            <FavoriteRoundedIcon sx={{color: 'red'}} fontSize=\"large\"\r\n                                                 onClick={(event) => removeFromFavsHandler(props.id)}/> :\r\n                            <FavoriteRoundedIcon color='disabled' fontSize=\"large\"\r\n                                                 onClick={(event) => addToFavsHandler(props.id)}/>\r\n                    }\r\n                }\r\n            />\r\n        </ImageListItem>\r\n    );\r\n}\r\n\r\nexport default Item;","import React, {useEffect} from 'react';\r\nimport styles from '../styles/itemsList.module.scss'\r\nimport {useTypedUseSelector} from \"../../Redux/store\";\r\nimport {getFavouriteItemsThunk, getFavsAC, getItemsThunk} from \"../../Redux/mainReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport Item from \"./Item\";\r\nimport {ItemType} from \"../../types/types\";\r\n\r\nconst ItemsList = () => {\r\n    const items = useTypedUseSelector(state => state.main.items)\r\n    const favItems = useTypedUseSelector(state => state.main.favItems)\r\n    const showFavs = useTypedUseSelector(state => state.main.showFavs)\r\n    const currentPage = useTypedUseSelector(state => state.main.currentPage)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (showFavs) {\r\n            dispatch(getFavouriteItemsThunk())\r\n        } else {\r\n            dispatch(getItemsThunk(currentPage))\r\n            if (localStorage.getItem('favs')) {\r\n                dispatch(getFavsAC())\r\n            }\r\n        }\r\n    }, [favItems.length, currentPage, showFavs, dispatch])\r\n\r\n    if (showFavs && favItems.length === 0) {\r\n        return (<div className={styles.itemsList}>\r\n                <h1>Карточек пока нет</h1>\r\n            </div>\r\n        )\r\n    }\r\n    return (<div className={styles.itemsList}>\r\n            {items.length > 1 ?\r\n                    items.map((item: ItemType) => <Item {...item} key={item.id}/>) :\r\n                    <Item {...items}/>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ItemsList;","import * as React from 'react';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Stack from '@mui/material/Stack';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useTypedUseSelector} from \"../../Redux/store\";\r\nimport styles from '../styles/pagination.module.scss';\r\nimport {setCurrPageAC} from \"../../Redux/mainReducer\";\r\n\r\nexport default function PaginationPage() {\r\n    const dispatch = useDispatch()\r\n    const currentPage = useTypedUseSelector(state => state.main.currentPage)\r\n    const info = useTypedUseSelector(state => state.main.info)\r\n\r\n    const clickHandler = (target: any) => {\r\n\r\n        let num = Number(target.innerText)\r\n\r\n        if (target && target.dataset.testid === \"LastPageIcon\") {\r\n            num = info!.pages\r\n        }\r\n        if (target && target.dataset.testid === \"FirstPageIcon\") {\r\n            num = 1\r\n        }\r\n        if (target && target.dataset.testid === \"NavigateNextIcon\") {\r\n            num = currentPage + 1\r\n        }\r\n        if (target && target.dataset.testid === \"NavigateBeforeIcon\") {\r\n            num = currentPage - 1\r\n        }\r\n        dispatch(setCurrPageAC(num))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.pagination}>\r\n            <Stack spacing={2} sx={{mx: \"auto\", width: 450}}>\r\n                <Pagination count={info?.pages || 10} color={\"standard\"} variant=\"outlined\" shape=\"rounded\"\r\n                            showFirstButton showLastButton\r\n                            onClick={(event) => {\r\n                                const btn = event.target as HTMLElement\r\n                                clickHandler(btn)\r\n                            }}/>\r\n            </Stack>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport styles from \"../styles/loader.module.scss\"\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={styles.ldsEllipsis}>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React from 'react';\nimport '../styles/App.css';\nimport Menu from \"./Menu\";\nimport {useTypedUseSelector} from \"../../Redux/store\";\nimport ItemsList from \"./ItemsList\";\nimport {Container} from \"@mui/material\";\nimport PaginationPage from \"./Pagination\";\nimport Loader from \"./Loader\";\n\nfunction App() {\n    const showFavs = useTypedUseSelector(state => state.main.showFavs)\n    const isLoading = useTypedUseSelector(state => state.main.isLoading)\n\n    return (\n        <Container maxWidth=\"xl\">\n            <Menu/>\n            {!showFavs && <PaginationPage/>}\n            {isLoading && <Loader/>}\n            <ItemsList/>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Components and styles/styles/index.css';\nimport App from './Components and styles/Components/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemsList\":\"itemsList_itemsList__1SekA\",\"itemsList__item\":\"itemsList_itemsList__item__3cNxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"pagination_pagination__2RPFz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsEllipsis\":\"loader_ldsEllipsis__3SLsr\",\"lds-ellipsis1\":\"loader_lds-ellipsis1__2VNb_\",\"lds-ellipsis2\":\"loader_lds-ellipsis2__bf1QV\",\"lds-ellipsis3\":\"loader_lds-ellipsis3__1GuT4\"};"],"sourceRoot":""}